{"version":3,"file":"fsr-data-grid.mjs","sources":["../../../projects/fsr-data-grid/src/lib/fsr-data-grid.service.ts","../../../projects/fsr-data-grid/src/lib/directives/draggable.directive.ts","../../../projects/fsr-data-grid/src/lib/directives/cell-template.directive.ts","../../../projects/fsr-data-grid/src/lib/directives/header-cell.directive.ts","../../../projects/fsr-data-grid/src/lib/directives/grid-column.directive.ts","../../../projects/fsr-data-grid/src/lib/directives/row-expandable-template.directive.ts","../../../projects/fsr-data-grid/src/lib/directives/row-expandable.directive.ts","../../../projects/fsr-data-grid/src/lib/grid-container.directive.ts","../../../projects/fsr-data-grid/src/lib/grid-column/grid-column.component.ts","../../../projects/fsr-data-grid/src/lib/grid-column/grid-column.component.html","../../../projects/fsr-data-grid/src/lib/grid-cell/grid-cell.component.ts","../../../projects/fsr-data-grid/src/lib/grid-cell/grid-cell.component.html","../../../projects/fsr-data-grid/src/lib/grid-row/grid-row.component.ts","../../../projects/fsr-data-grid/src/lib/grid-row/grid-row.component.html","../../../projects/fsr-data-grid/src/lib/directives/resizable.directive.ts","../../../projects/fsr-data-grid/src/lib/fsr-data-grid.component.ts","../../../projects/fsr-data-grid/src/lib/fsr-data-grid.component.html","../../../projects/fsr-data-grid/src/lib/fsr-data-grid.module.ts","../../../projects/fsr-data-grid/src/public-api.ts","../../../projects/fsr-data-grid/src/fsr-data-grid.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FsrDataGridService {\n\n  constructor() { }\n\n  getAllSelectedRows() {\n    console.log('inside all');\n  }\n}\n","import { Directive, ElementRef, EventEmitter, HostListener, Input, OnDestroy, Output } from '@angular/core';\nimport { fromEvent, Subscription } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { FsrColumnDef } from '../interfaces/fsr-column';\nimport { columnDragEvent } from '../interfaces/grid-events';\n\n@Directive({\n  selector: '[fsrDraggable]'\n})\nexport class DraggableDirective implements OnDestroy {\n  @Input() dragColumn!: FsrColumnDef;\n  @Input() draggable!: boolean;\n\n  @Output() columnDragStart = new EventEmitter<columnDragEvent>();\n  @Output() columnDragging = new EventEmitter<columnDragEvent>();\n  @Output() columnDragEnd = new EventEmitter<columnDragEvent>();\n\n  element: HTMLElement;\n  isDragging: boolean = false;\n  subscription?: Subscription;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  @HostListener('mousedown', ['$event'])\n  onMousedown(event: MouseEvent): void {\n    const isDragElm = (<HTMLElement>event.target).classList.contains('fsrDraggableColumn');\n\n    if (isDragElm && this.draggable) {\n      event.preventDefault();\n      this.isDragging = true;\n      this.dragColumn.$$dragging = true;\n      const mouseDownPos = { x: event.clientX, y: event.clientY };\n\n      const mouseup = fromEvent(document, 'mouseup');\n      this.subscription = mouseup.subscribe((ev: any) => this.onMouseup(ev));\n\n      const mouseMoveSub = fromEvent(document, 'mousemove')\n        .pipe(takeUntil(mouseup))\n        .subscribe((ev: any) => this.move(ev, mouseDownPos));\n\n      this.subscription.add(mouseMoveSub);\n\n      this.columnDragStart.emit({\n        event,\n        element: this.element,\n        column: this.dragColumn\n      });\n    }\n  }\n\n  move(event: MouseEvent, mouseDownPos: { x: number; y: number }): void {\n    if (!this.isDragging) return;\n\n    const x = event.clientX - mouseDownPos.x;\n    const y = event.clientY - mouseDownPos.y;\n\n    if (this.draggable) {\n      this.element.style.left = `${x}px`;\n      this.element.classList.add('dragging');\n      this.columnDragging.emit({\n        event,\n        element: this.element,\n        column: this.dragColumn\n      });\n    }\n  }\n\n  onMouseup(event: MouseEvent) {\n    if (!this.isDragging) return;\n\n    this.isDragging = false;\n\n    this.element.classList.remove('dragging');\n\n    if (this.subscription) {\n      this._destroySubscription();\n      this.columnDragEnd.emit({\n        event,\n        element: this.element,\n        column: this.dragColumn\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._destroySubscription();\n  }\n\n  private _destroySubscription(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n      this.subscription = undefined;\n    }\n  }\n\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n  selector: '[fsrCellTemplate]'\n})\nexport class CellTemplateDirective {\n\n  constructor(public template: TemplateRef<any>) {}\n\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n  selector: '[fsrHeaderCell]'\n})\nexport class HeaderCellDirective {\n\n  constructor(public template: TemplateRef<any>) {}\n\n}\n","import { ContentChild, Directive, Input, OnChanges, TemplateRef } from '@angular/core';\nimport { CellTemplateDirective } from './cell-template.directive';\nimport { HeaderCellDirective } from './header-cell.directive';\n\n@Directive({\n  selector: 'fsrGridColumn'\n})\nexport class GridColumnDirective implements OnChanges{\n  @Input() name: string = '';\n  @Input() title: string = '';\n  @Input() pinLeft?: boolean;\n  @Input() pinRight?: boolean;\n  @Input() resizeable?: boolean = false;\n  //@Input() comparator: any;\n  //@Input() pipe: any;\n  @Input() visible?: boolean = true;\n  @Input() sortable: boolean = true;\n  @Input() draggable: boolean = true;\n  //@Input() canAutoResize: boolean;\n  @Input() minWidth?: number;\n  @Input() width?: number;\n  @Input() maxWidth?: number;\n  @Input() checkboxable?: boolean;\n  @Input() headerCheckboxable?: boolean;\n  @Input() headerClass?: string | ((data: any) => string | any);\n  @Input() cellClass?: string | ((data: any) => string | any);\n\n\n  @Input('cellTemplate')\n  _cellTemplateInput!: TemplateRef<any>;\n\n  @ContentChild(CellTemplateDirective, { read: TemplateRef, static: true })\n  _cellTemplateQuery!: TemplateRef<any>;\n\n  get cellTemplate(): TemplateRef<any> {\n    return this._cellTemplateInput || this._cellTemplateQuery;\n  }\n\n  @Input('headerTemplate')\n  _headerTemplateInput!: TemplateRef<any>;\n\n  @ContentChild(HeaderCellDirective, { read: TemplateRef, static: true })\n  _headerTemplateQuery!: TemplateRef<any>;\n\n  get headerTemplate(): TemplateRef<any> {\n    return this._headerTemplateInput || this._headerTemplateQuery;\n  }\n\n  constructor() {}\n\n  ngOnChanges() {\n  }\n\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n  selector: '[fsrRowExpandableTemplate]'\n})\nexport class RowExpandableTemplateDirective {\n  expandableHeight: number = 100;\n\n  constructor(public template: TemplateRef<any>) {}\n\n}\n","import { ContentChild, Directive, EventEmitter, Input, Output, TemplateRef } from '@angular/core';\nimport { RowExpandableTemplateDirective } from './row-expandable-template.directive';\n\n@Directive({\n  selector: '[fsrRowExpandable]'\n})\nexport class RowExpandableDirective {\n  @Input() expandableHeight: number = 100;\n\n  @Input('template')\n  _templateInput!: TemplateRef<any>;\n\n  @ContentChild(RowExpandableTemplateDirective, { read: TemplateRef, static: true })\n  _templateQuery!: TemplateRef<any>;\n\n  get template(): TemplateRef<any> {\n    return this._templateInput || this._templateQuery;\n  }\n\n  /**\n   * Row expandable toggle.\n   */\n  @Output() toggle: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * Toggle row expansion\n   */\n  toggleExpandRow(row: any): void {\n    this.toggle.emit({\n      type: 'row',\n      value: row\n    });\n  }\n\n  /**\n   * Method to expand all rows\n   */\n  expandAllRows(): void {\n    this.toggle.emit({\n      type: 'all',\n      value: true\n    });\n  }\n\n  /**\n   * Method to collase all rows\n   */\n  collapseAllRows(): void {\n    this.toggle.emit({\n      type: 'all',\n      value: false\n    });\n  }\n\n}\n","import { Directive, ViewContainerRef } from '@angular/core';\n\n@Directive({\n  selector: '[fsrGridContainer]'\n})\nexport class GridContainerDirective {\n\n  constructor(public viewContainerRef: ViewContainerRef) { }\n\n}\n","import { Component, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\nimport { GridContainerDirective } from '../grid-container.directive';\nimport { FsrColumnDef } from '../interfaces/fsr-column';\nimport { filterChangedEvent, sortChangedEvent } from '../interfaces/grid-events';\n\n@Component({\n  selector: 'fsr-grid-column',\n  templateUrl: './grid-column.component.html',\n  styleUrls: ['./grid-column.component.scss']\n})\nexport class GridColumnComponent implements OnInit, OnDestroy {\n  @Input() colDef!: FsrColumnDef;\n  @Output() columnFilterChanged = new EventEmitter<filterChangedEvent>();\n  @Output() columnSortChanged = new EventEmitter<sortChangedEvent>();\n  @ViewChild(GridContainerDirective, {static: true}) fsrCellViewContainer!: GridContainerDirective;\n\n  componentRef: any;\n  element: any;\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n  ngOnDestroy(): void {\n    this.clearContainer();\n  }\n\n  ngOnInit(): void {\n    if(this.colDef.enableFiltering) {\n      this.clearContainer();\n      this.componentRef = this.fsrCellViewContainer.viewContainerRef.createComponent(this.colDef.filterCompoment!);\n      this.componentRef.instance.onChange = (_event:any)=> {\n        this.columnFilterChanged.emit({\n          value: _event,\n          column: this.colDef\n        });\n      }\n      if(this.colDef.filterComponentParams) {\n        for(const key in this.colDef.filterComponentParams) {\n          this.componentRef.instance[key] = this.colDef.filterComponentParams[key];\n        }\n      }\n    }\n  }\n\n  getFilterValue(): filterChangedEvent {\n    return {\n      value: this.componentRef.instance.value,\n      column: this.colDef\n    };\n  }\n\n  private clearContainer() {\n    const viewContainerRef = this.fsrCellViewContainer.viewContainerRef;\n    viewContainerRef.clear();\n  }\n\n  sortChange() {\n    if(!this.colDef.$$dragging) {\n      if(this.colDef.sortable) {\n        if(this.colDef.sort === null) {\n          this.colDef.sort = 'asc';\n        } else if(this.colDef.sort === 'asc') {\n          this.colDef.sort = 'desc';\n        } else {\n          this.colDef.sort = null;\n        }\n        this.columnSortChanged.emit({\n          sort: this.colDef.sort!,\n          column: this.colDef\n        });\n      }\n    }\n\n  }\n\n  public getSortStatus(): sortChangedEvent {\n    return {\n      sort: this.colDef.sort!,\n      column: this.colDef\n    }\n  }\n\n}\n","<div class=\"fsr-grid-header-cell\" >\n  <div>\n    <div class=\"fsr-grid-header-cell-title-wrapper\">\n      <div class=\"fsr-grid-header-cell-title\" [ngClass]=\"{'fsrDraggableColumn': colDef.draggable }\" (click)=\"sortChange()\" title=\"{{colDef.title}}\">{{colDef.title}}</div>\n      <span *ngIf=\"colDef.sortable\" class=\"fsr-sortable-icon\">\n        <i class=\"fa fa-caret-down fa-light\" *ngIf=\"colDef.sort === 'asc'\" title=\"Ascending\"></i>\n        <i class=\"fa fa-caret-up fa-light\" *ngIf=\"colDef.sort === 'desc'\" title=\"Descending\"></i>\n      </span>\n  </div>\n  </div>\n\n  <div class=\"fsr-header-filter\">\n    <ng-container fsrGridContainer></ng-container>\n  </div>\n  <div class=\"resizable-cell\" [ngClass]=\"{'fsr-resize-handle': colDef.resizable}\"></div>\n</div>\n","import { Component, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { GridContainerDirective } from '../grid-container.directive';\nimport { FsrColumnDef } from '../interfaces/fsr-column';\n\n@Component({\n  selector: 'fsr-grid-cell',\n  templateUrl: './grid-cell.component.html',\n  styleUrls: ['./grid-cell.component.scss']\n})\nexport class GridCellComponent implements OnInit, OnDestroy {\n  @Input() colDef!:FsrColumnDef;\n  @Input() value:any\n  @ViewChild(GridContainerDirective, {static: true}) fsrCellViewContainer!: GridContainerDirective;\n  componentRef: any;\n  constructor() { }\n  ngOnDestroy(): void {\n    this.clearContainer();\n  }\n\n  ngOnInit(): void {\n    this.clearContainer();\n    this.componentRef = this.fsrCellViewContainer.viewContainerRef.createComponent(this.colDef.renderer);\n    this.componentRef.instance.value = this.value;\n    if(this.colDef.rendererParams) {\n      for(const key in this.colDef.rendererParams) {\n        this.componentRef.instance[key] = this.colDef.rendererParams[key];\n      }\n    }\n  }\n\n  private clearContainer() {\n    const viewContainerRef = this.fsrCellViewContainer.viewContainerRef;\n    viewContainerRef.clear();\n  }\n\n}\n","<div>\n  <ng-container fsrGridContainer>\n  </ng-container>\n</div>\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FsrColumnDef } from '../interfaces/fsr-column';\nimport { onRowClickEvent, rowExpandableEvent, rowSelectionChangedEvent } from '../interfaces/grid-events';\n\n@Component({\n  selector: 'fsr-grid-row',\n  templateUrl: './grid-row.component.html',\n  styleUrls: ['./grid-row.component.scss']\n})\nexport class GridRowComponent implements OnInit {\n  @Input() columns:FsrColumnDef[] = []\n  @Input() expandable: boolean | undefined = false;\n  _data: any;\n  @Input() set data(_data:any) {\n    this._data = _data;\n    this.setRowContext();\n  }\n\n  get data() {\n    return this._data;\n  }\n\n  @Input() rowSelection:boolean | undefined = false;  // to show checkbox at row level\n  @Output() rowSelectionChange = new EventEmitter<rowSelectionChangedEvent>();\n  @Output() onRowClicked = new EventEmitter<onRowClickEvent>();\n  @Output() onRowExpandCollapse = new EventEmitter<rowExpandableEvent>();\n\n  @Input() isSelected: boolean = false;\n  @Input() expandableDetail?: any;\n  _isExpanded:boolean = false;\n  expandableContext:any;\n  @Input() set isExpanded(_isExpanded: boolean) {\n    this._isExpanded = _isExpanded;\n  }\n  get isExpanded() {\n    return this._isExpanded;\n  }\n\n  constructor() {\n  }\n\n  private setRowContext() {\n    this.expandableContext = {\n      data: this.data,\n      expanded: this.isExpanded\n    };\n  }\n\n  ngOnInit(): void {\n  }\n\n  rowSelectionChanged(event: any) {\n    this.rowSelectionChange.emit({\n      selected: this.isSelected,\n      data: this.data,\n      event: event\n    });\n  }\n\n  rowExpand() {\n    this.isExpanded = !this.isExpanded;\n    this.expandableContext.expanded = this.isExpanded;\n    this.onRowExpandCollapse.emit({\n      data: this.data,\n      expanded: this.isExpanded,\n      expandType: 'SINGLE'\n    });\n  }\n\n  onClicked(event:MouseEvent) {\n    this.onRowClicked.emit({\n      data: this.data,\n      event: event\n    });\n  }\n\n}\n","<div class=\"fsr-grid-row\" (click)=\"onClicked($event)\">\n  <fsr-grid-cell *ngFor=\"let column of columns\" class=\"fsr-grid-cell font-size-12px\" [colDef]=\"column\" [value]=\"data[column.key]\"\n    [ngStyle]=\"{'width': column.$$width +'px'}\">\n  </fsr-grid-cell>\n</div>\n\n","import { Directive, ElementRef, EventEmitter, HostListener, Input, Output } from '@angular/core';\nimport { fromEvent, Subscription } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Directive({\n  selector: '[fsrResizable]'\n})\nexport class ResizableDirective {\n  @Input() resizable: boolean = true;\n  @Output() onResize = new EventEmitter<number>();\n  @Output() onResizeEnd = new EventEmitter<number>();\n\n  resizableElement: HTMLElement;\n  resizing: boolean = false;\n  subscription?: Subscription;\n  constructor(element: ElementRef) {\n    this.resizableElement = element.nativeElement;\n  }\n\n  @HostListener('mousedown', ['$event'])\n  onMousedown(event: MouseEvent): void {\n    if (this.resizable) {\n      let isResizeHandle = (<HTMLElement>event.target).classList.contains('fsr-resize-handle');\n      if(isResizeHandle) {\n        let elementWidth = this.resizableElement.clientWidth;\n        let mouseDownX = event.screenX;\n        event.stopPropagation();\n        let mouseup = fromEvent(document, 'mouseup');\n        this.subscription = mouseup.subscribe((mouseupEvent:any) =>\n          this.onResizeStop(this.calculateWidth(mouseupEvent, elementWidth, mouseDownX)));\n        let resizeSubscription = fromEvent(document, 'mousemove').pipe(takeUntil(mouseup))\n        .subscribe((mouseMoveEvent: any) => {\n          this.resizeElement(this.calculateWidth(mouseMoveEvent, elementWidth, mouseDownX));\n        });\n        this.subscription.add(resizeSubscription);\n      }\n    }\n  }\n\n  private onResizeStop(width:number) {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n      this.subscription = undefined;\n    }\n    this.onResizeEnd.emit(width);\n  }\n\n  private resizeElement(width:number) {\n    this.onResize.emit(width);\n  }\n\n  private calculateWidth(event: MouseEvent, elementWidth: number, mouseDownX: number) {\n    const movementX = event.screenX - mouseDownX;\n    return elementWidth + movementX\n  }\n\n\n}\n","import { DOCUMENT } from '@angular/common';\nimport { AfterViewInit, Component, ContentChild, ContentChildren, ElementRef, EventEmitter, Inject, Input, OnInit, Output, QueryList, ViewChildren } from '@angular/core';\nimport * as _ from 'lodash';\nimport { DraggableDirective } from './directives/draggable.directive';\nimport { GridColumnDirective } from './directives/grid-column.directive';\nimport { RowExpandableTemplateDirective } from './directives/row-expandable-template.directive';\nimport { RowExpandableDirective } from './directives/row-expandable.directive';\nimport { FsrDataGridService } from './fsr-data-grid.service';\nimport { GridColumnComponent } from './grid-column/grid-column.component';\nimport { FsrColumnDef } from './interfaces/fsr-column';\nimport { FsrGridOptions } from './interfaces/fsr-grid-option';\nimport { columnDragEvent, columnReorderEvent, columnVisibilityEvent, filterChangedEvent, fsrColumnResizeEvent, onGridReadyEvent, onRowClickEvent, rowExpandableEvent, rowSelectionChangedEvent, selectAllRowsChangeEvent, sortChangedEvent } from './interfaces/grid-events';\nconst checkboxSelectionWidth = 30;\nconst rowExpandableWidth = 30;\n@Component({\n  selector: 'fsr-data-grid',\n  templateUrl: './fsr-data-grid.component.html',\n  styleUrls: ['./fsr-data-grid.scss']\n})\nexport class FsrDataGridComponent implements OnInit, AfterViewInit {\n  @Input() set ColumnDefs(defs: FsrColumnDef[]) {\n    this._columnDefs = defs;\n    this.setGridColumns();\n  }\n  @Input() set data(_data: any[]) {\n    this.setGridRows(_data);\n  }\n  @Input() set gridOptions(gridOptions: FsrGridOptions) {\n    _.extend(this._gridOptions, gridOptions);\n  }\n\n\n  // All output events\n  @Output() onGridReady = new EventEmitter<onGridReadyEvent>();\n  @Output() onRowClick = new EventEmitter<onRowClickEvent>();\n  @Output() selectAllRowsChanged = new EventEmitter<selectAllRowsChangeEvent>();\n  @Output() rowSelectionChanged = new EventEmitter<rowSelectionChangedEvent>();\n  @Output() columnResized = new EventEmitter<fsrColumnResizeEvent>();\n  @Output() columnResizeEnd = new EventEmitter<fsrColumnResizeEvent>();\n  @Output() rowExpandableEvent = new EventEmitter<rowExpandableEvent>();\n  @Output() filterChanged = new EventEmitter<filterChangedEvent>();\n  @Output() sortChanged = new EventEmitter<sortChangedEvent>();\n  @Output() columnReorder = new EventEmitter<columnReorderEvent>();\n\n  _gridOptions: FsrGridOptions = {\n    rowSelection: true,\n    rowExpandable: false\n  };\n\n  _rows: any = [];\n  _columnTemplates!: QueryList<GridColumnDirective>;\n  _columnDefs: FsrColumnDef[] = [];\n  visibleColumns: FsrColumnDef[] = [];\n  element: HTMLElement;\n  selectAllRows: boolean = false;\n  expandAllRows: boolean = false;\n  leftPinnedColumns: FsrColumnDef[] = [];\n  rightPinnedColumns: FsrColumnDef[] = [];\n  viewPortColumns: FsrColumnDef[] = [];\n  viewPort: any = {};\n  loadingData: boolean = true;\n  dragEventTarget: any;\n  positions:any = {};\n  private draggableColumnsOrder: string[] = []\n\n  @ContentChildren(GridColumnDirective)\n  set columnTemplates(templates: QueryList<GridColumnDirective>) {\n    this._columnTemplates = templates;\n    this.translateToColumns(templates);\n  }\n\n  @ViewChildren(GridColumnComponent) gridColumns!: QueryList<GridColumnComponent>;\n\n  @ContentChildren(DraggableDirective, { descendants: true })\n  draggables!: QueryList<DraggableDirective>;\n\n  @ContentChild(RowExpandableDirective) expandableDetail?: RowExpandableTemplateDirective;\n\n  constructor(element: ElementRef, private fsrDataGridService: FsrDataGridService,  @Inject(DOCUMENT) private document: any) {\n    this.element = element.nativeElement;\n  }\n  ngAfterViewInit(): void {\n    this.calculateColumnsWidth();\n  }\n\n  ngOnInit(): void {\n    this.onGridReady.emit({\n      api: this\n    });\n  }\n\n  private setGridRows(data: any[]) {\n    this._rows = [];\n    data.forEach((d: any) => {\n      this._rows.push({\n        data: d,\n        isSelected: false,\n        isExpanded: false\n      });\n    });\n  }\n\n  private setGridColumns() {\n    this.visibleColumns = this._columnDefs.filter((column: FsrColumnDef) => {\n      return column.visible;\n    });\n\n    this.calculateColumnsWidth();\n  }\n\n  private calculateColumnsWidth() {\n    let viewportWidth = this.viewPort.width;\n    if (this._gridOptions.rowSelection) {\n      viewportWidth -= checkboxSelectionWidth;\n    }\n    if (this._gridOptions.rowExpandable) {\n      viewportWidth -= rowExpandableWidth;\n    }\n    this.visibleColumns.forEach((column: FsrColumnDef) => {\n      if (!column.$$width) {\n        column.$$width = this._getColumnWidth(column, viewportWidth);\n      }\n    });\n    this.separateColumnsByPin();\n  }\n\n  private separateColumnsByPin() {\n    this.leftPinnedColumns = this.visibleColumns.filter((column: FsrColumnDef) => {\n      return column.pinnedColumn === 'LEFT';\n    });\n    this.viewPortColumns = this.visibleColumns.filter((column: FsrColumnDef) => {\n      return column.pinnedColumn !== 'RIGHT' && column.pinnedColumn !== 'LEFT';\n    });\n    if(this.draggableColumnsOrder.length === 0) {\n      this.draggableColumnsOrder = this.viewPortColumns.map((col:FsrColumnDef)=> col.key);\n    }\n    this.orderViewportColumns();\n    this.rightPinnedColumns = this.visibleColumns.filter((column: FsrColumnDef) => {\n      return column.pinnedColumn === 'RIGHT';\n    });\n\n    this.calculateViewportWidth();\n  }\n\n  private orderViewportColumns() {\n    this.viewPortColumns.sort((a, b) => this.draggableColumnsOrder.indexOf(a.key) - this.draggableColumnsOrder.indexOf(b.key));\n  }\n\n  private calculateViewportWidth() {\n    this.viewPort = this.element.getElementsByClassName('fsr-grid-wrapper')[0].getBoundingClientRect();\n  }\n\n  private _getColumnWidth(column: FsrColumnDef, viewportWidth: number): number {\n    let _defaultColWidth = viewportWidth / this.visibleColumns.length;\n    let colWidth: number = _defaultColWidth;\n    if (column.width) {\n      if (typeof (column.width) === 'string' && column.width.indexOf('%') !== -1) {\n        colWidth = viewportWidth * (parseFloat(column.width) / 100);\n      } else {\n        colWidth = parseInt(column.width as string);\n      }\n    }\n    return colWidth;\n  }\n\n  private translateToColumns(templates: QueryList<GridColumnDirective>) {\n    if (templates) {\n\n    }\n  }\n\n  onWidthResize(event: any, column: FsrColumnDef) {\n    column.$$width = event;\n    this.columnResized.emit({\n      column: column\n    });\n  }\n\n  onWidthResizeEnd(event: any, column: FsrColumnDef) {\n    column.$$width = event;\n    this.columnResizeEnd.emit({\n      column: column\n    });\n  }\n\n  onRowClicked(rowData: onRowClickEvent) {\n    this.onRowClick.emit(rowData);\n  }\n\n  selectAll(event: any) {\n    if (this.selectAllRows) {\n      this._rows.forEach((row: any) => {\n        row.isSelected = true;\n      });\n    } else {\n      this._rows.forEach((row: any) => {\n        row.isSelected = false;\n      });\n    }\n    this.selectAllRowsChanged.emit({\n      selected: this.selectAllRows,\n      event: event\n    });\n  }\n\n  getAllSelectedRows() {\n    return (this._rows.filter((row: any) => {\n      return row.isSelected;\n    })).map((r:any) => r.data);\n  }\n\n  getVisibleColumns() {\n    return [...this.leftPinnedColumns, ...this.viewPortColumns, ...this.rightPinnedColumns];\n  }\n\n  setColumnVisible(columns: columnVisibilityEvent[]) {\n    for (var i = 0; i < columns.length; i++) {\n      let _index = this._columnDefs.findIndex((column: FsrColumnDef) => column.key === columns[i].column);\n      if (_index !== -1) {\n        this._columnDefs[_index].visible = columns[i].visibility;\n      }\n    }\n    this.setGridColumns();\n  }\n\n  expandCollapseAllRows() {\n    this.expandAllRows = !this.expandAllRows;\n    this._rows.forEach((row: any) => {\n      row.isExpanded = this.expandAllRows;\n    });\n    this.rowExpandableEvent.emit({\n      expandType: 'ALL',\n      expanded: this.expandAllRows,\n      data: this._rows\n    });\n  }\n\n  onRowExpandCollapse(row: any) {\n    row.isExpanded = !row.isExpanded;\n    this.rowExpandableEvent.emit({\n      expandType: 'SINGLE',\n      expanded: row.isExpanded,\n      data: row.data\n    });\n  }\n\n  rowSelectionChange(event: any, row: any) {\n    this.rowSelectionChanged.emit({\n      data: row.data,\n      event: event,\n      selected: row.isSelected\n    });\n  }\n\n  onColumnFilterChanged(event: any) {\n    this.filterChanged.emit(event);\n  }\n\n  getFilteredColumns() {\n    let filters: filterChangedEvent[] = [];\n    if (this.gridColumns) {\n      this.gridColumns!.toArray().forEach((column: GridColumnComponent) => {\n        const filterData = column.getFilterValue();\n        if (filterData.value) {\n          filters.push(filterData);\n        }\n      });\n    }\n    return filters;\n  }\n\n  getSortedColumns() {\n    let filters: sortChangedEvent[] = [];\n    if (this.gridColumns) {\n      this.gridColumns!.toArray().forEach((column: GridColumnComponent) => {\n        const filterData = column.getSortStatus();\n        if (filterData) {\n          filters.push(filterData);\n        }\n      });\n    }\n    return filters;\n  }\n\n  columnSortChanged($event: sortChangedEvent) {\n    this.sortChanged.emit($event);\n  }\n\n  setGridData(data:any[]) {\n    this.setGridRows(data);\n    this.loadingData = false;\n  }\n\n  columnDragStart(event:columnDragEvent) {\n    this.positions = {};\n\n    let i = 0;\n    for (const column of this.gridColumns.toArray()) {\n      const elm = column.element;\n      const left = parseInt(elm.offsetLeft.toString(), 0);\n      this.positions[column.colDef.key] = {\n        left,\n        right: left + parseInt(elm.offsetWidth.toString(), 0),\n        index: i++,\n        element: elm\n      };\n    }\n\n  }\n  columnDragging(event:columnDragEvent) {\n  }\n\n  columnDragEnd(event:columnDragEvent) {\n    const prevPos = this.positions[event.column.key];\n    event.column.$$dragging = false;\n    const target = this.isTarget(event.column, event.event);\n    if (target) {\n      this.reorderColumns(prevPos.index, target.i);\n      this.columnReorder.emit({\n        column: event.column,\n        event: event.event,\n        newPos: target.i,\n        prevPos: prevPos.index\n      });\n    }\n    event.element.style.left = 'auto';\n  }\n\n  reorderColumns(prevIndex:number, newIndex:number) {\n    let dragColumn = this.draggableColumnsOrder[prevIndex];\n    this.draggableColumnsOrder.splice(prevIndex, 1);\n    this.draggableColumnsOrder.splice(newIndex, 0, dragColumn);\n    this.orderViewportColumns();\n\n  }\n\n  isTarget(column: FsrColumnDef, event: MouseEvent): any {\n    let i = 0;\n    const x = event.x || event.clientX;\n    const y = event.y || event.clientY;\n    const targets = this.document.elementsFromPoint(x, y);\n\n    for (const key in this.positions) {\n      const pos = this.positions[key];\n      if (column.key !== key && targets.find((el: any) => el === pos.element)) {\n        return { pos, i };\n      }\n      i++;\n    }\n  }\n\n  resetColumns() {\n    this.draggableColumnsOrder = [];\n  }\n\n\n\n}\n","<div class=\"fsr-grid-wrapper\">\n  <div class=\"fsr-grid-body-wrapper\" *ngIf=\"_columnDefs.length > 0\">\n    <!-- Left pinned container -->\n    <div class=\"fsr-left-pinned-container\">\n      <div class=\"fsr-header-row\">\n        <div class=\"fsr-header-rows-action-container\" *ngIf=\"_gridOptions.rowExpandable || _gridOptions.rowSelection\">\n          <div *ngIf=\"_gridOptions.rowExpandable\" (click)=\"expandCollapseAllRows()\" class=\"actionable\">\n            <i class=\"fa fa-light {{ expandAllRows ? 'fa-chevron-down' : 'fa-chevron-right'}} font-size-12px\"></i>\n          </div>\n          <div *ngIf=\"_gridOptions.rowSelection\" class=\"actionable\">\n            <input type=\"checkbox\" [(ngModel)]=\"selectAllRows\" (change)=\"selectAll($event)\"\n              class=\"form-control-xs align-middle\">\n          </div>\n        </div>\n        <fsr-grid-column *ngFor=\"let column of leftPinnedColumns\" [colDef]=\"column\" fsrResizable\n          [ngStyle]=\"{'width': column.$$width +'px'}\" [resizable]=\"column.resizable!\"\n          (onResize)=\"onWidthResize($event, column)\" (onResizeEnd)=\"onWidthResizeEnd($event, column)\"\n          (columnFilterChanged)=\"onColumnFilterChanged($event)\" (columnSortChanged)=\"columnSortChanged($event)\">\n        </fsr-grid-column>\n      </div>\n      <div class=\"fsr-viewport-rows\">\n        <div *ngFor=\"let row of _rows\">\n          <div class=\"fsr-viewport-row-data\">\n            <div class=\"fsr-viewport-rows-action-container\"  *ngIf=\"_gridOptions.rowExpandable || _gridOptions.rowSelection\">\n              <div *ngIf=\"_gridOptions.rowExpandable\" class=\"actionable\" (click)=\"onRowExpandCollapse(row)\">\n                <i class=\"fa fa-light {{ row.isExpanded ? 'fa-chevron-down' : 'fa-chevron-right'}} font-size-12px\"></i>\n              </div>\n              <div *ngIf=\"_gridOptions.rowSelection\" class=\"actionable\">\n                <input type=\"checkbox\" [(ngModel)]=\"row.isSelected\" (change)=\"rowSelectionChange($event, row)\"\n                  class=\"form-control-xs align-middle\">\n              </div>\n            </div>\n            <fsr-grid-row *ngIf=\"leftPinnedColumns.length\" [data]=\"row.data\" [isSelected]=\"row.isSelected\"\n              [ngClass]=\"{'fsr-row-selected' : row.isSelected}\" [isExpanded]=\"row.isExpanded\"\n              [columns]=\"leftPinnedColumns\" [rowSelection]=\"_gridOptions.rowSelection\"\n              [expandableDetail]=\"expandableDetail\" [expandable]=\"_gridOptions.rowExpandable\"\n              (onRowClicked)=\"onRowClicked($event)\">\n            </fsr-grid-row>\n          </div>\n          <div *ngIf=\"expandableDetail && expandableDetail.template && row.isExpanded\" class=\"row-expandable-wrapper\"\n            [style.height.px]=\"expandableDetail.expandableHeight!\">\n            <ng-template *ngIf=\"expandableDetail && expandableDetail.template\"\n              [ngTemplateOutlet]=\"expandableDetail.template\"\n              [ngTemplateOutletContext]=\"{data: row.data, expanded: row.isExpanded}\">\n            </ng-template>\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- Viewport container -->\n    <div class=\"fsr-viewport-container\">\n      <div class=\"fsr-header-row\">\n        <fsr-grid-column *ngFor=\"let column of viewPortColumns\" fsrResizable fsrDraggable\n        [ngStyle]=\"{'width': column.$$width +'px'}\"\n        [colDef]=\"column\"\n        [draggable]=\"column.draggable!\"\n        [dragColumn]=\"column\"\n        [resizable]=\"column.resizable!\"\n        (onResize)=\"onWidthResize($event, column)\"\n        (onResizeEnd)=\"onWidthResizeEnd($event, column)\"\n        (columnFilterChanged)=\"onColumnFilterChanged($event)\"\n        (columnSortChanged)=\"columnSortChanged($event)\"\n        (columnDragStart)=\"columnDragStart($event)\"\n        (columnDragging)=\"columnDragging($event)\"\n        (columnDragEnd)=\"columnDragEnd($event)\">\n        </fsr-grid-column>\n      </div>\n      <div class=\"fsr-viewport-rows\">\n        <div *ngFor=\"let row of _rows\">\n          <div class=\"fsr-viewport-row-data\">\n            <fsr-grid-row [data]=\"row.data\" [isSelected]=\"row.isSelected\" [isExpanded]=\"row.isExpanded\"\n              [ngClass]=\"{'fsr-row-selected' : row.isSelected}\" [columns]=\"viewPortColumns\"\n              [rowSelection]=\"_gridOptions.rowSelection\" [expandableDetail]=\"expandableDetail\"\n              [expandable]=\"_gridOptions.rowExpandable\" (onRowClicked)=\"onRowClicked($event)\">\n            </fsr-grid-row>\n          </div>\n          <div *ngIf=\"expandableDetail && expandableDetail.template && row.isExpanded\" class=\"row-expandable-wrapper\"\n            [style.height.px]=\"expandableDetail.expandableHeight!\">\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- Right pinned container -->\n    <div class=\"fsr-right-pinned-container\">\n      <div class=\"fsr-header-row\">\n        <fsr-grid-column *ngFor=\"let column of rightPinnedColumns\" [colDef]=\"column\" fsrResizable\n          [resizable]=\"column.resizable!\" (onResize)=\"onWidthResize($event, column)\"\n          (onResizeEnd)=\"onWidthResizeEnd($event, column)\" [ngStyle]=\"{'width': column.$$width +'px'}\"\n          (columnFilterChanged)=\"onColumnFilterChanged($event)\" (columnSortChanged)=\"columnSortChanged($event)\">\n        </fsr-grid-column>\n      </div>\n      <div class=\"fsr-viewport-rows\">\n        <div *ngFor=\"let row of _rows\">\n          <div class=\"fsr-viewport-row-data\">\n            <fsr-grid-row [data]=\"row.data\" [isSelected]=\"row.isSelected\" [isExpanded]=\"row.isExpanded\"\n              [ngClass]=\"{'fsr-row-selected' : row.isSelected}\" [columns]=\"rightPinnedColumns\"\n              [rowSelection]=\"_gridOptions.rowSelection\" [expandableDetail]=\"expandableDetail\"\n              [expandable]=\"_gridOptions.rowExpandable\" (onRowClicked)=\"onRowClicked($event)\"\n              (columnFilterChanged)=\"onColumnFilterChanged($event)\">\n            </fsr-grid-row>\n          </div>\n          <div *ngIf=\"expandableDetail && expandableDetail.template && row.isExpanded\" class=\"row-expandable-wrapper\"\n            [style.height.px]=\"expandableDetail.expandableHeight!\">\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"fsr-shimmer-wrapper\" *ngIf=\"_columnDefs.length > 0 && loadingData\">\n    <div class=\"fsr-shimmer-row\" *ngFor=\"let row of [1,2,3,4,5]\" [ngClass]=\"_gridOptions.rowExpandable && _gridOptions.rowSelection ? 'ps-60' :  _gridOptions.rowExpandable || _gridOptions.rowSelection ? 'ps-30' : ''\">\n      <div class=\"fsr-shimmer-row-cells\">\n        <div class=\"fsr-shimmer-row-cell\" *ngFor=\"let column of leftPinnedColumns\"\n          [ngStyle]=\"{'width': column.$$width +'px'}\">\n          <div class=\"bg-shimmer content\"></div>\n        </div>\n      </div>\n\n      <div class=\"fsr-shimmer-row-cells\">\n        <div class=\"fsr-shimmer-row-cell\" *ngFor=\"let column of viewPortColumns\"\n          [ngStyle]=\"{'width': column.$$width +'px'}\">\n          <div class=\"bg-shimmer content\"></div>\n        </div>\n      </div>\n\n      <div class=\"fsr-shimmer-row-cells\">\n        <div class=\"fsr-shimmer-row-cell\" *ngFor=\"let column of rightPinnedColumns\"\n          [ngStyle]=\"{'width': column.$$width +'px'}\">\n          <div class=\"bg-shimmer content\"></div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { FsrDataGridComponent } from './fsr-data-grid.component';\nimport { GridColumnComponent } from './grid-column/grid-column.component';\nimport { GridRowComponent } from './grid-row/grid-row.component';\nimport { GridCellComponent } from './grid-cell/grid-cell.component';\nimport { GridContainerDirective } from './grid-container.directive';\nimport { GridColumnDirective } from './directives/grid-column.directive';\nimport { CellTemplateDirective } from './directives/cell-template.directive';\nimport { HeaderCellDirective } from './directives/header-cell.directive';\nimport { ResizableDirective } from './directives/resizable.directive';\nimport { RowExpandableDirective } from './directives/row-expandable.directive';\nimport { RowExpandableTemplateDirective } from './directives/row-expandable-template.directive';\nimport { DraggableDirective } from './directives/draggable.directive';\n\n@NgModule({\n  declarations: [\n    FsrDataGridComponent,\n    GridColumnComponent,\n    GridRowComponent,\n    GridCellComponent,\n    GridContainerDirective,\n    GridColumnDirective,\n    CellTemplateDirective,\n    HeaderCellDirective,\n    ResizableDirective,\n    RowExpandableDirective,\n    RowExpandableTemplateDirective,\n    DraggableDirective\n  ],\n  imports: [\n    CommonModule,\n    FormsModule\n  ],\n  exports: [\n    FsrDataGridComponent,\n    GridColumnDirective,\n    CellTemplateDirective,\n    HeaderCellDirective,\n    RowExpandableDirective,\n    RowExpandableTemplateDirective\n  ]\n})\nexport class FsrDataGridModule { }\n","/*\n * Public API Surface of fsr-data-grid\n */\n\nexport * from './lib/fsr-data-grid.service';\nexport * from './lib/fsr-data-grid.component';\nexport * from './lib/fsr-data-grid.module';\nexport * from './lib/directives/grid-column.directive';\nexport * from './lib/directives/cell-template.directive';\nexport * from './lib/directives/header-cell.directive';\nexport * from './lib/directives/row-expandable.directive';\nexport * from './lib/directives/row-expandable-template.directive';\nexport * from './fsr-grid-interface';\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1","i2.GridContainerDirective","i1.GridContainerDirective","i2.GridCellComponent","i4.GridColumnComponent","i5.GridRowComponent","i6.ResizableDirective","i7.DraggableDirective"],"mappings":"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"}