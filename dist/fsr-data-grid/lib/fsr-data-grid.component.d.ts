import { AfterViewInit, ElementRef, EventEmitter, OnInit, QueryList } from '@angular/core';
import { DraggableDirective } from './directives/draggable.directive';
import { GridColumnDirective } from './directives/grid-column.directive';
import { RowExpandableTemplateDirective } from './directives/row-expandable-template.directive';
import { FsrDataGridService } from './fsr-data-grid.service';
import { GridColumnComponent } from './grid-column/grid-column.component';
import { FsrColumnDef } from './interfaces/fsr-column';
import { FsrGridOptions } from './interfaces/fsr-grid-option';
import { columnDragEvent, columnReorderEvent, columnVisibilityEvent, filterChangedEvent, fsrColumnResizeEvent, onGridReadyEvent, onRowClickEvent, rowExpandableEvent, rowSelectionChangedEvent, selectAllRowsChangeEvent, sortChangedEvent } from './interfaces/grid-events';
import * as i0 from "@angular/core";
export declare class FsrDataGridComponent implements OnInit, AfterViewInit {
    private fsrDataGridService;
    private document;
    set ColumnDefs(defs: FsrColumnDef[]);
    set data(_data: any[]);
    set gridOptions(gridOptions: FsrGridOptions);
    onGridReady: EventEmitter<onGridReadyEvent>;
    onRowClick: EventEmitter<onRowClickEvent>;
    selectAllRowsChanged: EventEmitter<selectAllRowsChangeEvent>;
    rowSelectionChanged: EventEmitter<rowSelectionChangedEvent>;
    columnResized: EventEmitter<fsrColumnResizeEvent>;
    columnResizeEnd: EventEmitter<fsrColumnResizeEvent>;
    rowExpandableEvent: EventEmitter<rowExpandableEvent>;
    filterChanged: EventEmitter<filterChangedEvent>;
    sortChanged: EventEmitter<sortChangedEvent>;
    columnReorder: EventEmitter<columnReorderEvent>;
    _gridOptions: FsrGridOptions;
    _rows: any;
    _columnTemplates: QueryList<GridColumnDirective>;
    _columnDefs: FsrColumnDef[];
    visibleColumns: FsrColumnDef[];
    element: HTMLElement;
    selectAllRows: boolean;
    expandAllRows: boolean;
    leftPinnedColumns: FsrColumnDef[];
    rightPinnedColumns: FsrColumnDef[];
    viewPortColumns: FsrColumnDef[];
    viewPort: any;
    loadingData: boolean;
    dragEventTarget: any;
    positions: any;
    private draggableColumnsOrder;
    set columnTemplates(templates: QueryList<GridColumnDirective>);
    gridColumns: QueryList<GridColumnComponent>;
    draggables: QueryList<DraggableDirective>;
    expandableDetail?: RowExpandableTemplateDirective;
    constructor(element: ElementRef, fsrDataGridService: FsrDataGridService, document: any);
    ngAfterViewInit(): void;
    ngOnInit(): void;
    private setGridRows;
    private setGridColumns;
    private calculateColumnsWidth;
    private separateColumnsByPin;
    private orderViewportColumns;
    private calculateViewportWidth;
    private _getColumnWidth;
    private translateToColumns;
    onWidthResize(event: any, column: FsrColumnDef): void;
    onWidthResizeEnd(event: any, column: FsrColumnDef): void;
    onRowClicked(rowData: onRowClickEvent): void;
    selectAll(event: any): void;
    getAllSelectedRows(): any;
    getVisibleColumns(): FsrColumnDef[];
    setColumnVisible(columns: columnVisibilityEvent[]): void;
    expandCollapseAllRows(): void;
    onRowExpandCollapse(row: any): void;
    rowSelectionChange(event: any, row: any): void;
    onColumnFilterChanged(event: any): void;
    getFilteredColumns(): filterChangedEvent[];
    getSortedColumns(): sortChangedEvent[];
    columnSortChanged($event: sortChangedEvent): void;
    setGridData(data: any[]): void;
    columnDragStart(event: columnDragEvent): void;
    columnDragging(event: columnDragEvent): void;
    columnDragEnd(event: columnDragEvent): void;
    reorderColumns(prevIndex: number, newIndex: number): void;
    isTarget(column: FsrColumnDef, event: MouseEvent): any;
    resetColumns(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<FsrDataGridComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<FsrDataGridComponent, "fsr-data-grid", never, { "ColumnDefs": "ColumnDefs"; "data": "data"; "gridOptions": "gridOptions"; }, { "onGridReady": "onGridReady"; "onRowClick": "onRowClick"; "selectAllRowsChanged": "selectAllRowsChanged"; "rowSelectionChanged": "rowSelectionChanged"; "columnResized": "columnResized"; "columnResizeEnd": "columnResizeEnd"; "rowExpandableEvent": "rowExpandableEvent"; "filterChanged": "filterChanged"; "sortChanged": "sortChanged"; "columnReorder": "columnReorder"; }, ["expandableDetail", "columnTemplates", "draggables"], never, false>;
}
