import { DOCUMENT } from '@angular/common';
import { Component, ContentChild, ContentChildren, EventEmitter, Inject, Input, Output, ViewChildren } from '@angular/core';
import * as _ from 'lodash';
import { DraggableDirective } from './directives/draggable.directive';
import { GridColumnDirective } from './directives/grid-column.directive';
import { RowExpandableDirective } from './directives/row-expandable.directive';
import { GridColumnComponent } from './grid-column/grid-column.component';
import * as i0 from "@angular/core";
import * as i1 from "./fsr-data-grid.service";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
import * as i4 from "./grid-column/grid-column.component";
import * as i5 from "./grid-row/grid-row.component";
import * as i6 from "./directives/resizable.directive";
import * as i7 from "./directives/draggable.directive";
const checkboxSelectionWidth = 30;
const rowExpandableWidth = 30;
export class FsrDataGridComponent {
    constructor(element, fsrDataGridService, document) {
        this.fsrDataGridService = fsrDataGridService;
        this.document = document;
        // All output events
        this.onGridReady = new EventEmitter();
        this.onRowClick = new EventEmitter();
        this.selectAllRowsChanged = new EventEmitter();
        this.rowSelectionChanged = new EventEmitter();
        this.columnResized = new EventEmitter();
        this.columnResizeEnd = new EventEmitter();
        this.rowExpandableEvent = new EventEmitter();
        this.filterChanged = new EventEmitter();
        this.sortChanged = new EventEmitter();
        this.columnReorder = new EventEmitter();
        this._gridOptions = {
            rowSelection: true,
            rowExpandable: false
        };
        this._rows = [];
        this._columnDefs = [];
        this.visibleColumns = [];
        this.selectAllRows = false;
        this.expandAllRows = false;
        this.leftPinnedColumns = [];
        this.rightPinnedColumns = [];
        this.viewPortColumns = [];
        this.viewPort = {};
        this.loadingData = true;
        this.positions = {};
        this.draggableColumnsOrder = [];
        this.element = element.nativeElement;
    }
    set ColumnDefs(defs) {
        this._columnDefs = defs;
        this.setGridColumns();
    }
    set data(_data) {
        this.setGridRows(_data);
    }
    set gridOptions(gridOptions) {
        _.extend(this._gridOptions, gridOptions);
    }
    set columnTemplates(templates) {
        this._columnTemplates = templates;
        this.translateToColumns(templates);
    }
    ngAfterViewInit() {
        this.calculateColumnsWidth();
    }
    ngOnInit() {
        this.onGridReady.emit({
            api: this
        });
    }
    setGridRows(data) {
        this._rows = [];
        data.forEach((d) => {
            this._rows.push({
                data: d,
                isSelected: false,
                isExpanded: false
            });
        });
    }
    setGridColumns() {
        this.visibleColumns = this._columnDefs.filter((column) => {
            return column.visible;
        });
        this.calculateColumnsWidth();
    }
    calculateColumnsWidth() {
        let viewportWidth = this.viewPort.width;
        if (this._gridOptions.rowSelection) {
            viewportWidth -= checkboxSelectionWidth;
        }
        if (this._gridOptions.rowExpandable) {
            viewportWidth -= rowExpandableWidth;
        }
        this.visibleColumns.forEach((column) => {
            if (!column.$$width) {
                column.$$width = this._getColumnWidth(column, viewportWidth);
            }
        });
        this.separateColumnsByPin();
    }
    separateColumnsByPin() {
        this.leftPinnedColumns = this.visibleColumns.filter((column) => {
            return column.pinnedColumn === 'LEFT';
        });
        this.viewPortColumns = this.visibleColumns.filter((column) => {
            return column.pinnedColumn !== 'RIGHT' && column.pinnedColumn !== 'LEFT';
        });
        if (this.draggableColumnsOrder.length === 0) {
            this.draggableColumnsOrder = this.viewPortColumns.map((col) => col.key);
        }
        this.orderViewportColumns();
        this.rightPinnedColumns = this.visibleColumns.filter((column) => {
            return column.pinnedColumn === 'RIGHT';
        });
        this.calculateViewportWidth();
    }
    orderViewportColumns() {
        this.viewPortColumns.sort((a, b) => this.draggableColumnsOrder.indexOf(a.key) - this.draggableColumnsOrder.indexOf(b.key));
    }
    calculateViewportWidth() {
        this.viewPort = this.element.getElementsByClassName('fsr-grid-wrapper')[0].getBoundingClientRect();
    }
    _getColumnWidth(column, viewportWidth) {
        let _defaultColWidth = viewportWidth / this.visibleColumns.length;
        let colWidth = _defaultColWidth;
        if (column.width) {
            if (typeof (column.width) === 'string' && column.width.indexOf('%') !== -1) {
                colWidth = viewportWidth * (parseFloat(column.width) / 100);
            }
            else {
                colWidth = parseInt(column.width);
            }
        }
        return colWidth;
    }
    translateToColumns(templates) {
        if (templates) {
        }
    }
    onWidthResize(event, column) {
        column.$$width = event;
        this.columnResized.emit({
            column: column
        });
    }
    onWidthResizeEnd(event, column) {
        column.$$width = event;
        this.columnResizeEnd.emit({
            column: column
        });
    }
    onRowClicked(rowData) {
        this.onRowClick.emit(rowData);
    }
    selectAll(event) {
        if (this.selectAllRows) {
            this._rows.forEach((row) => {
                row.isSelected = true;
            });
        }
        else {
            this._rows.forEach((row) => {
                row.isSelected = false;
            });
        }
        this.selectAllRowsChanged.emit({
            selected: this.selectAllRows,
            event: event
        });
    }
    getAllSelectedRows() {
        return (this._rows.filter((row) => {
            return row.isSelected;
        })).map((r) => r.data);
    }
    getVisibleColumns() {
        return [...this.leftPinnedColumns, ...this.viewPortColumns, ...this.rightPinnedColumns];
    }
    setColumnVisible(columns) {
        for (var i = 0; i < columns.length; i++) {
            let _index = this._columnDefs.findIndex((column) => column.key === columns[i].column);
            if (_index !== -1) {
                this._columnDefs[_index].visible = columns[i].visibility;
            }
        }
        this.setGridColumns();
    }
    expandCollapseAllRows() {
        this.expandAllRows = !this.expandAllRows;
        this._rows.forEach((row) => {
            row.isExpanded = this.expandAllRows;
        });
        this.rowExpandableEvent.emit({
            expandType: 'ALL',
            expanded: this.expandAllRows,
            data: this._rows
        });
    }
    onRowExpandCollapse(row) {
        row.isExpanded = !row.isExpanded;
        this.rowExpandableEvent.emit({
            expandType: 'SINGLE',
            expanded: row.isExpanded,
            data: row.data
        });
    }
    rowSelectionChange(event, row) {
        this.rowSelectionChanged.emit({
            data: row.data,
            event: event,
            selected: row.isSelected
        });
    }
    onColumnFilterChanged(event) {
        this.filterChanged.emit(event);
    }
    getFilteredColumns() {
        let filters = [];
        if (this.gridColumns) {
            this.gridColumns.toArray().forEach((column) => {
                const filterData = column.getFilterValue();
                if (filterData.value) {
                    filters.push(filterData);
                }
            });
        }
        return filters;
    }
    getSortedColumns() {
        let filters = [];
        if (this.gridColumns) {
            this.gridColumns.toArray().forEach((column) => {
                const filterData = column.getSortStatus();
                if (filterData) {
                    filters.push(filterData);
                }
            });
        }
        return filters;
    }
    columnSortChanged($event) {
        this.sortChanged.emit($event);
    }
    setGridData(data) {
        this.setGridRows(data);
        this.loadingData = false;
    }
    columnDragStart(event) {
        this.positions = {};
        let i = 0;
        for (const column of this.gridColumns.toArray()) {
            const elm = column.element;
            const left = parseInt(elm.offsetLeft.toString(), 0);
            this.positions[column.colDef.key] = {
                left,
                right: left + parseInt(elm.offsetWidth.toString(), 0),
                index: i++,
                element: elm
            };
        }
    }
    columnDragging(event) {
    }
    columnDragEnd(event) {
        const prevPos = this.positions[event.column.key];
        event.column.$$dragging = false;
        const target = this.isTarget(event.column, event.event);
        if (target) {
            this.reorderColumns(prevPos.index, target.i);
            this.columnReorder.emit({
                column: event.column,
                event: event.event,
                newPos: target.i,
                prevPos: prevPos.index
            });
        }
        event.element.style.left = 'auto';
    }
    reorderColumns(prevIndex, newIndex) {
        let dragColumn = this.draggableColumnsOrder[prevIndex];
        this.draggableColumnsOrder.splice(prevIndex, 1);
        this.draggableColumnsOrder.splice(newIndex, 0, dragColumn);
        this.orderViewportColumns();
    }
    isTarget(column, event) {
        let i = 0;
        const x = event.x || event.clientX;
        const y = event.y || event.clientY;
        const targets = this.document.elementsFromPoint(x, y);
        for (const key in this.positions) {
            const pos = this.positions[key];
            if (column.key !== key && targets.find((el) => el === pos.element)) {
                return { pos, i };
            }
            i++;
        }
    }
    resetColumns() {
        this.draggableColumnsOrder = [];
    }
}
FsrDataGridComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.11", ngImport: i0, type: FsrDataGridComponent, deps: [{ token: i0.ElementRef }, { token: i1.FsrDataGridService }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component });
FsrDataGridComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.11", type: FsrDataGridComponent, selector: "fsr-data-grid", inputs: { ColumnDefs: "ColumnDefs", data: "data", gridOptions: "gridOptions" }, outputs: { onGridReady: "onGridReady", onRowClick: "onRowClick", selectAllRowsChanged: "selectAllRowsChanged", rowSelectionChanged: "rowSelectionChanged", columnResized: "columnResized", columnResizeEnd: "columnResizeEnd", rowExpandableEvent: "rowExpandableEvent", filterChanged: "filterChanged", sortChanged: "sortChanged", columnReorder: "columnReorder" }, queries: [{ propertyName: "expandableDetail", first: true, predicate: RowExpandableDirective, descendants: true }, { propertyName: "columnTemplates", predicate: GridColumnDirective }, { propertyName: "draggables", predicate: DraggableDirective, descendants: true }], viewQueries: [{ propertyName: "gridColumns", predicate: GridColumnComponent, descendants: true }], ngImport: i0, template: "<div class=\"fsr-grid-wrapper\">\n  <div class=\"fsr-grid-body-wrapper\" *ngIf=\"_columnDefs.length > 0\">\n    <!-- Left pinned container -->\n    <div class=\"fsr-left-pinned-container\">\n      <div class=\"fsr-header-row\">\n        <div class=\"fsr-header-rows-action-container\" *ngIf=\"_gridOptions.rowExpandable || _gridOptions.rowSelection\">\n          <div *ngIf=\"_gridOptions.rowExpandable\" (click)=\"expandCollapseAllRows()\" class=\"actionable\">\n            <i class=\"fa fa-light {{ expandAllRows ? 'fa-chevron-down' : 'fa-chevron-right'}} font-size-12px\"></i>\n          </div>\n          <div *ngIf=\"_gridOptions.rowSelection\" class=\"actionable\">\n            <input type=\"checkbox\" [(ngModel)]=\"selectAllRows\" (change)=\"selectAll($event)\"\n              class=\"form-control-xs align-middle\">\n          </div>\n        </div>\n        <fsr-grid-column *ngFor=\"let column of leftPinnedColumns\" [colDef]=\"column\" fsrResizable\n          [ngStyle]=\"{'width': column.$$width +'px'}\" [resizable]=\"column.resizable!\"\n          (onResize)=\"onWidthResize($event, column)\" (onResizeEnd)=\"onWidthResizeEnd($event, column)\"\n          (columnFilterChanged)=\"onColumnFilterChanged($event)\" (columnSortChanged)=\"columnSortChanged($event)\">\n        </fsr-grid-column>\n      </div>\n      <div class=\"fsr-viewport-rows\">\n        <div *ngFor=\"let row of _rows\">\n          <div class=\"fsr-viewport-row-data\">\n            <div class=\"fsr-viewport-rows-action-container\"  *ngIf=\"_gridOptions.rowExpandable || _gridOptions.rowSelection\">\n              <div *ngIf=\"_gridOptions.rowExpandable\" class=\"actionable\" (click)=\"onRowExpandCollapse(row)\">\n                <i class=\"fa fa-light {{ row.isExpanded ? 'fa-chevron-down' : 'fa-chevron-right'}} font-size-12px\"></i>\n              </div>\n              <div *ngIf=\"_gridOptions.rowSelection\" class=\"actionable\">\n                <input type=\"checkbox\" [(ngModel)]=\"row.isSelected\" (change)=\"rowSelectionChange($event, row)\"\n                  class=\"form-control-xs align-middle\">\n              </div>\n            </div>\n            <fsr-grid-row *ngIf=\"leftPinnedColumns.length\" [data]=\"row.data\" [isSelected]=\"row.isSelected\"\n              [ngClass]=\"{'fsr-row-selected' : row.isSelected}\" [isExpanded]=\"row.isExpanded\"\n              [columns]=\"leftPinnedColumns\" [rowSelection]=\"_gridOptions.rowSelection\"\n              [expandableDetail]=\"expandableDetail\" [expandable]=\"_gridOptions.rowExpandable\"\n              (onRowClicked)=\"onRowClicked($event)\">\n            </fsr-grid-row>\n          </div>\n          <div *ngIf=\"expandableDetail && expandableDetail.template && row.isExpanded\" class=\"row-expandable-wrapper\"\n            [style.height.px]=\"expandableDetail.expandableHeight!\">\n            <ng-template *ngIf=\"expandableDetail && expandableDetail.template\"\n              [ngTemplateOutlet]=\"expandableDetail.template\"\n              [ngTemplateOutletContext]=\"{data: row.data, expanded: row.isExpanded}\">\n            </ng-template>\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- Viewport container -->\n    <div class=\"fsr-viewport-container\">\n      <div class=\"fsr-header-row\">\n        <fsr-grid-column *ngFor=\"let column of viewPortColumns\" fsrResizable fsrDraggable\n        [ngStyle]=\"{'width': column.$$width +'px'}\"\n        [colDef]=\"column\"\n        [draggable]=\"column.draggable!\"\n        [dragColumn]=\"column\"\n        [resizable]=\"column.resizable!\"\n        (onResize)=\"onWidthResize($event, column)\"\n        (onResizeEnd)=\"onWidthResizeEnd($event, column)\"\n        (columnFilterChanged)=\"onColumnFilterChanged($event)\"\n        (columnSortChanged)=\"columnSortChanged($event)\"\n        (columnDragStart)=\"columnDragStart($event)\"\n        (columnDragging)=\"columnDragging($event)\"\n        (columnDragEnd)=\"columnDragEnd($event)\">\n        </fsr-grid-column>\n      </div>\n      <div class=\"fsr-viewport-rows\">\n        <div *ngFor=\"let row of _rows\">\n          <div class=\"fsr-viewport-row-data\">\n            <fsr-grid-row [data]=\"row.data\" [isSelected]=\"row.isSelected\" [isExpanded]=\"row.isExpanded\"\n              [ngClass]=\"{'fsr-row-selected' : row.isSelected}\" [columns]=\"viewPortColumns\"\n              [rowSelection]=\"_gridOptions.rowSelection\" [expandableDetail]=\"expandableDetail\"\n              [expandable]=\"_gridOptions.rowExpandable\" (onRowClicked)=\"onRowClicked($event)\">\n            </fsr-grid-row>\n          </div>\n          <div *ngIf=\"expandableDetail && expandableDetail.template && row.isExpanded\" class=\"row-expandable-wrapper\"\n            [style.height.px]=\"expandableDetail.expandableHeight!\">\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- Right pinned container -->\n    <div class=\"fsr-right-pinned-container\">\n      <div class=\"fsr-header-row\">\n        <fsr-grid-column *ngFor=\"let column of rightPinnedColumns\" [colDef]=\"column\" fsrResizable\n          [resizable]=\"column.resizable!\" (onResize)=\"onWidthResize($event, column)\"\n          (onResizeEnd)=\"onWidthResizeEnd($event, column)\" [ngStyle]=\"{'width': column.$$width +'px'}\"\n          (columnFilterChanged)=\"onColumnFilterChanged($event)\" (columnSortChanged)=\"columnSortChanged($event)\">\n        </fsr-grid-column>\n      </div>\n      <div class=\"fsr-viewport-rows\">\n        <div *ngFor=\"let row of _rows\">\n          <div class=\"fsr-viewport-row-data\">\n            <fsr-grid-row [data]=\"row.data\" [isSelected]=\"row.isSelected\" [isExpanded]=\"row.isExpanded\"\n              [ngClass]=\"{'fsr-row-selected' : row.isSelected}\" [columns]=\"rightPinnedColumns\"\n              [rowSelection]=\"_gridOptions.rowSelection\" [expandableDetail]=\"expandableDetail\"\n              [expandable]=\"_gridOptions.rowExpandable\" (onRowClicked)=\"onRowClicked($event)\"\n              (columnFilterChanged)=\"onColumnFilterChanged($event)\">\n            </fsr-grid-row>\n          </div>\n          <div *ngIf=\"expandableDetail && expandableDetail.template && row.isExpanded\" class=\"row-expandable-wrapper\"\n            [style.height.px]=\"expandableDetail.expandableHeight!\">\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"fsr-shimmer-wrapper\" *ngIf=\"_columnDefs.length > 0 && loadingData\">\n    <div class=\"fsr-shimmer-row\" *ngFor=\"let row of [1,2,3,4,5]\" [ngClass]=\"_gridOptions.rowExpandable && _gridOptions.rowSelection ? 'ps-60' :  _gridOptions.rowExpandable || _gridOptions.rowSelection ? 'ps-30' : ''\">\n      <div class=\"fsr-shimmer-row-cells\">\n        <div class=\"fsr-shimmer-row-cell\" *ngFor=\"let column of leftPinnedColumns\"\n          [ngStyle]=\"{'width': column.$$width +'px'}\">\n          <div class=\"bg-shimmer content\"></div>\n        </div>\n      </div>\n\n      <div class=\"fsr-shimmer-row-cells\">\n        <div class=\"fsr-shimmer-row-cell\" *ngFor=\"let column of viewPortColumns\"\n          [ngStyle]=\"{'width': column.$$width +'px'}\">\n          <div class=\"bg-shimmer content\"></div>\n        </div>\n      </div>\n\n      <div class=\"fsr-shimmer-row-cells\">\n        <div class=\"fsr-shimmer-row-cell\" *ngFor=\"let column of rightPinnedColumns\"\n          [ngStyle]=\"{'width': column.$$width +'px'}\">\n          <div class=\"bg-shimmer content\"></div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n", styles: [".fsr-grid-wrapper{width:100%;overflow:hidden;position:relative}.fsr-grid-wrapper .fsr-grid-body-wrapper{display:flex;display:-ms-flexbox;flex-direction:row}.fsr-grid-wrapper .fsr-grid-body-wrapper .fsr-header-rows-action-container,.fsr-grid-wrapper .fsr-grid-body-wrapper .fsr-viewport-rows-action-container{display:flex;display:-ms-flexbox;flex-direction:row;align-items:center;align-content:center}.fsr-grid-wrapper .fsr-grid-body-wrapper .fsr-header-rows-action-container .actionable,.fsr-grid-wrapper .fsr-grid-body-wrapper .fsr-viewport-rows-action-container .actionable{width:30px;text-align:center;cursor:pointer}.fsr-grid-wrapper .fsr-header-row{background:var(--grid-header-background-color);display:inline-flex;display:-ms-inline-flexbox;align-items:center;height:70px;flex-direction:row;border-color:var(--grid-row-border-color);margin-bottom:3px}.fsr-grid-wrapper .fsr-header-row fsr-grid-column{display:flex;padding:5px 10px;flex-direction:column;position:relative;height:60px;overflow:hidden;font-size:.8em;border-color:var(--grid-row-border-color)}.fsr-grid-wrapper .fsr-header-row fsr-grid-column.dragging{z-index:2;background:var(--grid-header-background-color);cursor:move}.fsr-grid-wrapper .fsr-viewport-container{overflow-x:auto;overflow-y:hidden}.fsr-grid-wrapper .fsr-viewport-rows{flex-direction:column}.fsr-grid-wrapper .fsr-viewport-rows .fsr-viewport-row-data{display:flex;display:-ms-flexbox;margin-bottom:3px;height:40px;background:var(--grid-row-even-background-color)}.fsr-grid-wrapper .fsr-viewport-rows fsr-grid-row{height:40px;flex-direction:row;display:flex;display:-ms-flexbox;flex:0 0 auto;background:var(--grid-row-even-background-color)}.fsr-grid-wrapper .fsr-viewport-rows fsr-grid-row.fsr-row-selected{background:#f9f9f9}.fsr-grid-wrapper .fsr-shimmer-wrapper{overflow-x:auto}.fsr-grid-wrapper .fsr-shimmer-wrapper .fsr-shimmer-row{height:40px;display:flex;display:-webkit-flex;flex-direction:row;align-items:center;margin-bottom:5px;background:var(--grid-row-even-background-color)}.fsr-grid-wrapper .fsr-shimmer-wrapper .fsr-shimmer-row .fsr-shimmer-row-cells{flex-direction:row;display:flex;display:-ms-flexbox}.fsr-grid-wrapper .fsr-shimmer-wrapper .fsr-shimmer-row .fsr-shimmer-row-cells .fsr-shimmer-row-cell{padding:0 10px}.fsr-grid-wrapper .fsr-shimmer-wrapper .fsr-shimmer-row .fsr-shimmer-row-cells .fsr-shimmer-row-cell .bg-shimmer{height:10px}.fsr-grid-wrapper .ps-30{padding-left:30px}.fsr-grid-wrapper .ps-60{padding-left:60px}\n"], dependencies: [{ kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i2.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "directive", type: i3.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i4.GridColumnComponent, selector: "fsr-grid-column", inputs: ["colDef"], outputs: ["columnFilterChanged", "columnSortChanged"] }, { kind: "component", type: i5.GridRowComponent, selector: "fsr-grid-row", inputs: ["columns", "expandable", "data", "rowSelection", "isSelected", "expandableDetail", "isExpanded"], outputs: ["rowSelectionChange", "onRowClicked", "onRowExpandCollapse"] }, { kind: "directive", type: i6.ResizableDirective, selector: "[fsrResizable]", inputs: ["resizable"], outputs: ["onResize", "onResizeEnd"] }, { kind: "directive", type: i7.DraggableDirective, selector: "[fsrDraggable]", inputs: ["dragColumn", "draggable"], outputs: ["columnDragStart", "columnDragging", "columnDragEnd"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.11", ngImport: i0, type: FsrDataGridComponent, decorators: [{
            type: Component,
            args: [{ selector: 'fsr-data-grid', template: "<div class=\"fsr-grid-wrapper\">\n  <div class=\"fsr-grid-body-wrapper\" *ngIf=\"_columnDefs.length > 0\">\n    <!-- Left pinned container -->\n    <div class=\"fsr-left-pinned-container\">\n      <div class=\"fsr-header-row\">\n        <div class=\"fsr-header-rows-action-container\" *ngIf=\"_gridOptions.rowExpandable || _gridOptions.rowSelection\">\n          <div *ngIf=\"_gridOptions.rowExpandable\" (click)=\"expandCollapseAllRows()\" class=\"actionable\">\n            <i class=\"fa fa-light {{ expandAllRows ? 'fa-chevron-down' : 'fa-chevron-right'}} font-size-12px\"></i>\n          </div>\n          <div *ngIf=\"_gridOptions.rowSelection\" class=\"actionable\">\n            <input type=\"checkbox\" [(ngModel)]=\"selectAllRows\" (change)=\"selectAll($event)\"\n              class=\"form-control-xs align-middle\">\n          </div>\n        </div>\n        <fsr-grid-column *ngFor=\"let column of leftPinnedColumns\" [colDef]=\"column\" fsrResizable\n          [ngStyle]=\"{'width': column.$$width +'px'}\" [resizable]=\"column.resizable!\"\n          (onResize)=\"onWidthResize($event, column)\" (onResizeEnd)=\"onWidthResizeEnd($event, column)\"\n          (columnFilterChanged)=\"onColumnFilterChanged($event)\" (columnSortChanged)=\"columnSortChanged($event)\">\n        </fsr-grid-column>\n      </div>\n      <div class=\"fsr-viewport-rows\">\n        <div *ngFor=\"let row of _rows\">\n          <div class=\"fsr-viewport-row-data\">\n            <div class=\"fsr-viewport-rows-action-container\"  *ngIf=\"_gridOptions.rowExpandable || _gridOptions.rowSelection\">\n              <div *ngIf=\"_gridOptions.rowExpandable\" class=\"actionable\" (click)=\"onRowExpandCollapse(row)\">\n                <i class=\"fa fa-light {{ row.isExpanded ? 'fa-chevron-down' : 'fa-chevron-right'}} font-size-12px\"></i>\n              </div>\n              <div *ngIf=\"_gridOptions.rowSelection\" class=\"actionable\">\n                <input type=\"checkbox\" [(ngModel)]=\"row.isSelected\" (change)=\"rowSelectionChange($event, row)\"\n                  class=\"form-control-xs align-middle\">\n              </div>\n            </div>\n            <fsr-grid-row *ngIf=\"leftPinnedColumns.length\" [data]=\"row.data\" [isSelected]=\"row.isSelected\"\n              [ngClass]=\"{'fsr-row-selected' : row.isSelected}\" [isExpanded]=\"row.isExpanded\"\n              [columns]=\"leftPinnedColumns\" [rowSelection]=\"_gridOptions.rowSelection\"\n              [expandableDetail]=\"expandableDetail\" [expandable]=\"_gridOptions.rowExpandable\"\n              (onRowClicked)=\"onRowClicked($event)\">\n            </fsr-grid-row>\n          </div>\n          <div *ngIf=\"expandableDetail && expandableDetail.template && row.isExpanded\" class=\"row-expandable-wrapper\"\n            [style.height.px]=\"expandableDetail.expandableHeight!\">\n            <ng-template *ngIf=\"expandableDetail && expandableDetail.template\"\n              [ngTemplateOutlet]=\"expandableDetail.template\"\n              [ngTemplateOutletContext]=\"{data: row.data, expanded: row.isExpanded}\">\n            </ng-template>\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- Viewport container -->\n    <div class=\"fsr-viewport-container\">\n      <div class=\"fsr-header-row\">\n        <fsr-grid-column *ngFor=\"let column of viewPortColumns\" fsrResizable fsrDraggable\n        [ngStyle]=\"{'width': column.$$width +'px'}\"\n        [colDef]=\"column\"\n        [draggable]=\"column.draggable!\"\n        [dragColumn]=\"column\"\n        [resizable]=\"column.resizable!\"\n        (onResize)=\"onWidthResize($event, column)\"\n        (onResizeEnd)=\"onWidthResizeEnd($event, column)\"\n        (columnFilterChanged)=\"onColumnFilterChanged($event)\"\n        (columnSortChanged)=\"columnSortChanged($event)\"\n        (columnDragStart)=\"columnDragStart($event)\"\n        (columnDragging)=\"columnDragging($event)\"\n        (columnDragEnd)=\"columnDragEnd($event)\">\n        </fsr-grid-column>\n      </div>\n      <div class=\"fsr-viewport-rows\">\n        <div *ngFor=\"let row of _rows\">\n          <div class=\"fsr-viewport-row-data\">\n            <fsr-grid-row [data]=\"row.data\" [isSelected]=\"row.isSelected\" [isExpanded]=\"row.isExpanded\"\n              [ngClass]=\"{'fsr-row-selected' : row.isSelected}\" [columns]=\"viewPortColumns\"\n              [rowSelection]=\"_gridOptions.rowSelection\" [expandableDetail]=\"expandableDetail\"\n              [expandable]=\"_gridOptions.rowExpandable\" (onRowClicked)=\"onRowClicked($event)\">\n            </fsr-grid-row>\n          </div>\n          <div *ngIf=\"expandableDetail && expandableDetail.template && row.isExpanded\" class=\"row-expandable-wrapper\"\n            [style.height.px]=\"expandableDetail.expandableHeight!\">\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- Right pinned container -->\n    <div class=\"fsr-right-pinned-container\">\n      <div class=\"fsr-header-row\">\n        <fsr-grid-column *ngFor=\"let column of rightPinnedColumns\" [colDef]=\"column\" fsrResizable\n          [resizable]=\"column.resizable!\" (onResize)=\"onWidthResize($event, column)\"\n          (onResizeEnd)=\"onWidthResizeEnd($event, column)\" [ngStyle]=\"{'width': column.$$width +'px'}\"\n          (columnFilterChanged)=\"onColumnFilterChanged($event)\" (columnSortChanged)=\"columnSortChanged($event)\">\n        </fsr-grid-column>\n      </div>\n      <div class=\"fsr-viewport-rows\">\n        <div *ngFor=\"let row of _rows\">\n          <div class=\"fsr-viewport-row-data\">\n            <fsr-grid-row [data]=\"row.data\" [isSelected]=\"row.isSelected\" [isExpanded]=\"row.isExpanded\"\n              [ngClass]=\"{'fsr-row-selected' : row.isSelected}\" [columns]=\"rightPinnedColumns\"\n              [rowSelection]=\"_gridOptions.rowSelection\" [expandableDetail]=\"expandableDetail\"\n              [expandable]=\"_gridOptions.rowExpandable\" (onRowClicked)=\"onRowClicked($event)\"\n              (columnFilterChanged)=\"onColumnFilterChanged($event)\">\n            </fsr-grid-row>\n          </div>\n          <div *ngIf=\"expandableDetail && expandableDetail.template && row.isExpanded\" class=\"row-expandable-wrapper\"\n            [style.height.px]=\"expandableDetail.expandableHeight!\">\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"fsr-shimmer-wrapper\" *ngIf=\"_columnDefs.length > 0 && loadingData\">\n    <div class=\"fsr-shimmer-row\" *ngFor=\"let row of [1,2,3,4,5]\" [ngClass]=\"_gridOptions.rowExpandable && _gridOptions.rowSelection ? 'ps-60' :  _gridOptions.rowExpandable || _gridOptions.rowSelection ? 'ps-30' : ''\">\n      <div class=\"fsr-shimmer-row-cells\">\n        <div class=\"fsr-shimmer-row-cell\" *ngFor=\"let column of leftPinnedColumns\"\n          [ngStyle]=\"{'width': column.$$width +'px'}\">\n          <div class=\"bg-shimmer content\"></div>\n        </div>\n      </div>\n\n      <div class=\"fsr-shimmer-row-cells\">\n        <div class=\"fsr-shimmer-row-cell\" *ngFor=\"let column of viewPortColumns\"\n          [ngStyle]=\"{'width': column.$$width +'px'}\">\n          <div class=\"bg-shimmer content\"></div>\n        </div>\n      </div>\n\n      <div class=\"fsr-shimmer-row-cells\">\n        <div class=\"fsr-shimmer-row-cell\" *ngFor=\"let column of rightPinnedColumns\"\n          [ngStyle]=\"{'width': column.$$width +'px'}\">\n          <div class=\"bg-shimmer content\"></div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n", styles: [".fsr-grid-wrapper{width:100%;overflow:hidden;position:relative}.fsr-grid-wrapper .fsr-grid-body-wrapper{display:flex;display:-ms-flexbox;flex-direction:row}.fsr-grid-wrapper .fsr-grid-body-wrapper .fsr-header-rows-action-container,.fsr-grid-wrapper .fsr-grid-body-wrapper .fsr-viewport-rows-action-container{display:flex;display:-ms-flexbox;flex-direction:row;align-items:center;align-content:center}.fsr-grid-wrapper .fsr-grid-body-wrapper .fsr-header-rows-action-container .actionable,.fsr-grid-wrapper .fsr-grid-body-wrapper .fsr-viewport-rows-action-container .actionable{width:30px;text-align:center;cursor:pointer}.fsr-grid-wrapper .fsr-header-row{background:var(--grid-header-background-color);display:inline-flex;display:-ms-inline-flexbox;align-items:center;height:70px;flex-direction:row;border-color:var(--grid-row-border-color);margin-bottom:3px}.fsr-grid-wrapper .fsr-header-row fsr-grid-column{display:flex;padding:5px 10px;flex-direction:column;position:relative;height:60px;overflow:hidden;font-size:.8em;border-color:var(--grid-row-border-color)}.fsr-grid-wrapper .fsr-header-row fsr-grid-column.dragging{z-index:2;background:var(--grid-header-background-color);cursor:move}.fsr-grid-wrapper .fsr-viewport-container{overflow-x:auto;overflow-y:hidden}.fsr-grid-wrapper .fsr-viewport-rows{flex-direction:column}.fsr-grid-wrapper .fsr-viewport-rows .fsr-viewport-row-data{display:flex;display:-ms-flexbox;margin-bottom:3px;height:40px;background:var(--grid-row-even-background-color)}.fsr-grid-wrapper .fsr-viewport-rows fsr-grid-row{height:40px;flex-direction:row;display:flex;display:-ms-flexbox;flex:0 0 auto;background:var(--grid-row-even-background-color)}.fsr-grid-wrapper .fsr-viewport-rows fsr-grid-row.fsr-row-selected{background:#f9f9f9}.fsr-grid-wrapper .fsr-shimmer-wrapper{overflow-x:auto}.fsr-grid-wrapper .fsr-shimmer-wrapper .fsr-shimmer-row{height:40px;display:flex;display:-webkit-flex;flex-direction:row;align-items:center;margin-bottom:5px;background:var(--grid-row-even-background-color)}.fsr-grid-wrapper .fsr-shimmer-wrapper .fsr-shimmer-row .fsr-shimmer-row-cells{flex-direction:row;display:flex;display:-ms-flexbox}.fsr-grid-wrapper .fsr-shimmer-wrapper .fsr-shimmer-row .fsr-shimmer-row-cells .fsr-shimmer-row-cell{padding:0 10px}.fsr-grid-wrapper .fsr-shimmer-wrapper .fsr-shimmer-row .fsr-shimmer-row-cells .fsr-shimmer-row-cell .bg-shimmer{height:10px}.fsr-grid-wrapper .ps-30{padding-left:30px}.fsr-grid-wrapper .ps-60{padding-left:60px}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.FsrDataGridService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { ColumnDefs: [{
                type: Input
            }], data: [{
                type: Input
            }], gridOptions: [{
                type: Input
            }], onGridReady: [{
                type: Output
            }], onRowClick: [{
                type: Output
            }], selectAllRowsChanged: [{
                type: Output
            }], rowSelectionChanged: [{
                type: Output
            }], columnResized: [{
                type: Output
            }], columnResizeEnd: [{
                type: Output
            }], rowExpandableEvent: [{
                type: Output
            }], filterChanged: [{
                type: Output
            }], sortChanged: [{
                type: Output
            }], columnReorder: [{
                type: Output
            }], columnTemplates: [{
                type: ContentChildren,
                args: [GridColumnDirective]
            }], gridColumns: [{
                type: ViewChildren,
                args: [GridColumnComponent]
            }], draggables: [{
                type: ContentChildren,
                args: [DraggableDirective, { descendants: true }]
            }], expandableDetail: [{
                type: ContentChild,
                args: [RowExpandableDirective]
            }] } });
//# sourceMappingURL=data:application/json;base64,